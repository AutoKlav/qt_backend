syntax = "proto3";

package autoklav;

service Autoklav {
    // Status
    rpc getStatus(Empty) returns (Status);

    // Global variables
    rpc getVariables(Empty) returns (Variables);
    rpc setVariable(SetVariable) returns (Status);

    // Process
    rpc getAllProcesses(Empty) returns (ProcessInfoList);
    rpc getDistinctProcessValues(ProcessFilterRequest) returns (FilteredProcessList);
    rpc getUniqueProcesses(Empty) returns (ProcessInfoList);
    rpc getFilteredModeValues(ProcessModeFilterRequest) returns (FilteredModeProcessList);
    rpc getProcessLogs(ProcessLogRequest) returns (ProcessLogList);
    rpc getAllProcessTypes(Empty) returns (ProcessTypesList);
    rpc createProcessType(ProcessTypeRequest) returns (Status);    
    rpc deleteProcessType(TypeRequest) returns (Status);
    rpc deleteProcess(TypeRequest) returns (Status);
    rpc startProcess(StartProcessRequest) returns (Status);
    rpc stopProcess(Empty) returns (Status);

    // Sensor
    rpc getSensorPinValues(Empty) returns (SensorValues);
    rpc getSensorRelayValues(Empty) returns (SensorRelayValues);
    rpc updateInputPin(UpdateInputPinRequest) returns (Status);

    // Bacteria
    rpc getBacteria(Empty) returns (BacteriaList);
    rpc createBacteria(BacteriaRequest) returns (Status);    
    rpc deleteBacteria(TypeRequest) returns (Status);

    // StateMachine
    rpc getStateMachineValues(Empty) returns (StateMachineValues);
    rpc setRelayStatus(SetRelay) returns (Status);    
}

message Empty {}

message TypeRequest {
    int32 id = 1;
}

message Status {
    int32 code = 1;
    int32 errors = 2;
    string errorsString = 3;
}

message ProcessTypeRequest {
    string name = 1;
    string type = 2;
    double customTemp = 3;    
    double maintainTemp = 4;
}

message ProcessType {
    int32 id = 1;
    string name = 2;
    string type = 3;
    double customTemp = 4;    
    double maintainTemp = 5;
}

message ProcessTypesList {
    repeated ProcessType processTypes = 1;
}

message Variables {
    int32 stateMachineTick = 1;
    int32 dbTick = 2;
    double k = 3;
    double coolingThreshold = 4;
    double expansionUpperTemp = 5;
    double expansionLowerTemp = 6;
    double heaterWaterLevel = 7;
    double maintainWaterTankTemp = 8;
}

message SetVariable {
    string name = 1;
    string value = 2;
}

message SetRelay {
    uint32 id = 1;
    string value = 2;
}

message ProcessFilterRequest {
    string columnName = 1;    
}

message ProcessModeFilterRequest {
    string productName = 1;
    string productQuantity = 2;
}

message UpdateInputPinRequest {
    uint32 id = 1;
    double minValue = 2;
    double maxValue = 3; 
}

message SensorValues {
    double temp = 1;
    double expansionTemp = 2;
    double heaterTemp = 3;
    double tankTemp = 4;
    double tempK = 5;
    double tankWaterLevel = 6;
    double pressure = 7;
    double steamPressure = 8; 

    // Digital input
    uint32 doorClosed = 9;
    uint32 burnerFault = 10;
    uint32 waterShortage = 11;
}

message SensorRelayValues {
    uint32 fillTankWithWater = 1;
    uint32 cooling = 2;
    uint32 tankHeating = 3;
    uint32 coolingHelper = 4;
    uint32 autoklavFill = 5;
    uint32 waterDrain = 6;
    uint32 heating = 7;
    uint32 pump = 8;
    uint32 electricHeating = 9;
    uint32 increasePressure = 10;
    uint32 extensionCooling = 11;
    uint32 alarmSignal = 12;
}

message StateMachineValues {
    uint32 id = 1;
    double elapsedTime = 2;
    SensorValues sensorValues = 3;
    double dTemp = 4;
    uint32 state = 5;
    double Dr = 6;
    double Fr = 7;
    double r = 8;
    double sumFr = 9;
    double sumR = 10;
    string timestamp = 11;
    string heatingEnd = 12;
    string coolingEnd = 13;
}

enum HeatingType {
    STEAM = 0;
    ELECTRIC = 1;
}

enum ProcessConfigMode {
    TARGETF = 0;
    TIME = 1;
}

message ProcessConfig {    
    HeatingType heatingType = 1;    
    ProcessConfigMode mode = 2;    
}

message ProcessInfo {
    uint32 id = 1;
    string batchLTO = 2;
    Bacteria bacteria = 3;
    string productName = 4;
    string productQuantity = 5;
    string processStart = 6;
    string targetF = 7;
    string targetHeatingTime = 8;
    string targetCoolingTime = 9;
    string processLength = 10;
    ProcessType processType = 11;
    string finishTemp = 12;
}

message BacteriaList {
    repeated Bacteria bacteria = 1; 
}

message Bacteria {
    uint32 id = 1;
    string name = 2;
    string description = 3;
    double d0 = 4;
    double z = 5;
}

message BacteriaRequest {    
    string name = 1;
    string description = 2;
    double d0 = 3;
    double z = 4;
}

message StartProcessRequest {
    ProcessConfig processConfig = 1;
    ProcessInfo processInfo = 2;
}

message ProcessLogRequest{
    repeated uint32 ids = 1;
}

message FilteredProcessList {
    repeated string values = 1;
}

message FilteredModeProcessList {
    repeated string targetFValues = 1;
    repeated string processLengthValues = 2;
}

// New message to hold a list of ProcessInfo
message ProcessInfoList {
    repeated ProcessInfo processes = 1;
}

message ProcessLogList {
    repeated StateMachineValues processLogs = 1; 
}
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: autoklav.proto
#ifndef GRPC_autoklav_2eproto__INCLUDED
#define GRPC_autoklav_2eproto__INCLUDED

#include "autoklav.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace Autoklav {

class Autoklav final {
 public:
  static constexpr char const* service_full_name() {
    return "Autoklav.Autoklav";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Status
    virtual ::grpc::Status getStatus(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>> AsyncgetStatus(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>>(AsyncgetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>> PrepareAsyncgetStatus(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>>(PrepareAsyncgetStatusRaw(context, request, cq));
    }
    // Global variables
    virtual ::grpc::Status getVariables(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::Variables* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Variables>> AsyncgetVariables(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Variables>>(AsyncgetVariablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Variables>> PrepareAsyncgetVariables(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Variables>>(PrepareAsyncgetVariablesRaw(context, request, cq));
    }
    virtual ::grpc::Status setVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::Autoklav::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>> AsyncsetVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>>(AsyncsetVariableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>> PrepareAsyncsetVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>>(PrepareAsyncsetVariableRaw(context, request, cq));
    }
    // Process
    virtual ::grpc::Status startProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::Autoklav::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>> AsyncstartProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>>(AsyncstartProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>> PrepareAsyncstartProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>>(PrepareAsyncstartProcessRaw(context, request, cq));
    }
    virtual ::grpc::Status stopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>> AsyncstopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>>(AsyncstopProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>> PrepareAsyncstopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>>(PrepareAsyncstopProcessRaw(context, request, cq));
    }
    // Sensor
    virtual ::grpc::Status getSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::SensorValues* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::SensorValues>> AsyncgetSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::SensorValues>>(AsyncgetSensorValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::SensorValues>> PrepareAsyncgetSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::SensorValues>>(PrepareAsyncgetSensorValuesRaw(context, request, cq));
    }
    // StateMachine
    virtual ::grpc::Status getStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::StateMachineValues* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::StateMachineValues>> AsyncgetStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::StateMachineValues>>(AsyncgetStateMachineValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::StateMachineValues>> PrepareAsyncgetStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::StateMachineValues>>(PrepareAsyncgetStateMachineValuesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Status
      virtual void getStatus(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getStatus(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Global variables
      virtual void getVariables(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Variables* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getVariables(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Variables* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable* request, ::Autoklav::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable* request, ::Autoklav::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Process
      virtual void startProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest* request, ::Autoklav::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void startProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest* request, ::Autoklav::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void stopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sensor
      virtual void getSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::SensorValues* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::SensorValues* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // StateMachine
      virtual void getStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::StateMachineValues* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::StateMachineValues* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>* AsyncgetStatusRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>* PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Variables>* AsyncgetVariablesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Variables>* PrepareAsyncgetVariablesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>* AsyncsetVariableRaw(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>* PrepareAsyncsetVariableRaw(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>* AsyncstartProcessRaw(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>* PrepareAsyncstartProcessRaw(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>* AsyncstopProcessRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::Status>* PrepareAsyncstopProcessRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::SensorValues>* AsyncgetSensorValuesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::SensorValues>* PrepareAsyncgetSensorValuesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::StateMachineValues>* AsyncgetStateMachineValuesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Autoklav::StateMachineValues>* PrepareAsyncgetStateMachineValuesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getStatus(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>> AsyncgetStatus(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>>(AsyncgetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>> PrepareAsyncgetStatus(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>>(PrepareAsyncgetStatusRaw(context, request, cq));
    }
    ::grpc::Status getVariables(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::Variables* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Variables>> AsyncgetVariables(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Variables>>(AsyncgetVariablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Variables>> PrepareAsyncgetVariables(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Variables>>(PrepareAsyncgetVariablesRaw(context, request, cq));
    }
    ::grpc::Status setVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::Autoklav::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>> AsyncsetVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>>(AsyncsetVariableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>> PrepareAsyncsetVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>>(PrepareAsyncsetVariableRaw(context, request, cq));
    }
    ::grpc::Status startProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::Autoklav::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>> AsyncstartProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>>(AsyncstartProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>> PrepareAsyncstartProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>>(PrepareAsyncstartProcessRaw(context, request, cq));
    }
    ::grpc::Status stopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>> AsyncstopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>>(AsyncstopProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>> PrepareAsyncstopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>>(PrepareAsyncstopProcessRaw(context, request, cq));
    }
    ::grpc::Status getSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::SensorValues* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::SensorValues>> AsyncgetSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::SensorValues>>(AsyncgetSensorValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::SensorValues>> PrepareAsyncgetSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::SensorValues>>(PrepareAsyncgetSensorValuesRaw(context, request, cq));
    }
    ::grpc::Status getStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::Autoklav::StateMachineValues* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::StateMachineValues>> AsyncgetStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::StateMachineValues>>(AsyncgetStateMachineValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::StateMachineValues>> PrepareAsyncgetStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Autoklav::StateMachineValues>>(PrepareAsyncgetStateMachineValuesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getStatus(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response, std::function<void(::grpc::Status)>) override;
      void getStatus(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getVariables(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Variables* response, std::function<void(::grpc::Status)>) override;
      void getVariables(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Variables* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable* request, ::Autoklav::Status* response, std::function<void(::grpc::Status)>) override;
      void setVariable(::grpc::ClientContext* context, const ::Autoklav::SetVariable* request, ::Autoklav::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void startProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest* request, ::Autoklav::Status* response, std::function<void(::grpc::Status)>) override;
      void startProcess(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest* request, ::Autoklav::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void stopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response, std::function<void(::grpc::Status)>) override;
      void stopProcess(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::SensorValues* response, std::function<void(::grpc::Status)>) override;
      void getSensorValues(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::SensorValues* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::StateMachineValues* response, std::function<void(::grpc::Status)>) override;
      void getStateMachineValues(::grpc::ClientContext* context, const ::Autoklav::Empty* request, ::Autoklav::StateMachineValues* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>* AsyncgetStatusRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>* PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Variables>* AsyncgetVariablesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Variables>* PrepareAsyncgetVariablesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>* AsyncsetVariableRaw(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>* PrepareAsyncsetVariableRaw(::grpc::ClientContext* context, const ::Autoklav::SetVariable& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>* AsyncstartProcessRaw(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>* PrepareAsyncstartProcessRaw(::grpc::ClientContext* context, const ::Autoklav::StartProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>* AsyncstopProcessRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::Status>* PrepareAsyncstopProcessRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::SensorValues>* AsyncgetSensorValuesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::SensorValues>* PrepareAsyncgetSensorValuesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::StateMachineValues>* AsyncgetStateMachineValuesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Autoklav::StateMachineValues>* PrepareAsyncgetStateMachineValuesRaw(::grpc::ClientContext* context, const ::Autoklav::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_getVariables_;
    const ::grpc::internal::RpcMethod rpcmethod_setVariable_;
    const ::grpc::internal::RpcMethod rpcmethod_startProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_stopProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_getSensorValues_;
    const ::grpc::internal::RpcMethod rpcmethod_getStateMachineValues_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Status
    virtual ::grpc::Status getStatus(::grpc::ServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response);
    // Global variables
    virtual ::grpc::Status getVariables(::grpc::ServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::Variables* response);
    virtual ::grpc::Status setVariable(::grpc::ServerContext* context, const ::Autoklav::SetVariable* request, ::Autoklav::Status* response);
    // Process
    virtual ::grpc::Status startProcess(::grpc::ServerContext* context, const ::Autoklav::StartProcessRequest* request, ::Autoklav::Status* response);
    virtual ::grpc::Status stopProcess(::grpc::ServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response);
    // Sensor
    virtual ::grpc::Status getSensorValues(::grpc::ServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::SensorValues* response);
    // StateMachine
    virtual ::grpc::Status getStateMachineValues(::grpc::ServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::StateMachineValues* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatus(::grpc::ServerContext* context, ::Autoklav::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Autoklav::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getVariables() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVariables(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVariables(::grpc::ServerContext* context, ::Autoklav::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Autoklav::Variables>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setVariable() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_setVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVariable(::grpc::ServerContext* /*context*/, const ::Autoklav::SetVariable* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetVariable(::grpc::ServerContext* context, ::Autoklav::SetVariable* request, ::grpc::ServerAsyncResponseWriter< ::Autoklav::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_startProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_startProcess() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_startProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::StartProcessRequest* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststartProcess(::grpc::ServerContext* context, ::Autoklav::StartProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::Autoklav::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stopProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stopProcess() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_stopProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopProcess(::grpc::ServerContext* context, ::Autoklav::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Autoklav::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSensorValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getSensorValues() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getSensorValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSensorValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::SensorValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSensorValues(::grpc::ServerContext* context, ::Autoklav::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Autoklav::SensorValues>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getStateMachineValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getStateMachineValues() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getStateMachineValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStateMachineValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::StateMachineValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStateMachineValues(::grpc::ServerContext* context, ::Autoklav::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Autoklav::StateMachineValues>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getStatus<WithAsyncMethod_getVariables<WithAsyncMethod_setVariable<WithAsyncMethod_startProcess<WithAsyncMethod_stopProcess<WithAsyncMethod_getSensorValues<WithAsyncMethod_getStateMachineValues<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getStatus() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response) { return this->getStatus(context, request, response); }));}
    void SetMessageAllocatorFor_getStatus(
        ::grpc::MessageAllocator< ::Autoklav::Empty, ::Autoklav::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getVariables() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::Variables>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::Variables* response) { return this->getVariables(context, request, response); }));}
    void SetMessageAllocatorFor_getVariables(
        ::grpc::MessageAllocator< ::Autoklav::Empty, ::Autoklav::Variables>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::Variables>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVariables(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getVariables(
      ::grpc::CallbackServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Variables* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setVariable() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Autoklav::SetVariable, ::Autoklav::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Autoklav::SetVariable* request, ::Autoklav::Status* response) { return this->setVariable(context, request, response); }));}
    void SetMessageAllocatorFor_setVariable(
        ::grpc::MessageAllocator< ::Autoklav::SetVariable, ::Autoklav::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Autoklav::SetVariable, ::Autoklav::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVariable(::grpc::ServerContext* /*context*/, const ::Autoklav::SetVariable* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setVariable(
      ::grpc::CallbackServerContext* /*context*/, const ::Autoklav::SetVariable* /*request*/, ::Autoklav::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_startProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_startProcess() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Autoklav::StartProcessRequest, ::Autoklav::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Autoklav::StartProcessRequest* request, ::Autoklav::Status* response) { return this->startProcess(context, request, response); }));}
    void SetMessageAllocatorFor_startProcess(
        ::grpc::MessageAllocator< ::Autoklav::StartProcessRequest, ::Autoklav::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Autoklav::StartProcessRequest, ::Autoklav::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_startProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::StartProcessRequest* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* startProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::Autoklav::StartProcessRequest* /*request*/, ::Autoklav::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stopProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stopProcess() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::Status* response) { return this->stopProcess(context, request, response); }));}
    void SetMessageAllocatorFor_stopProcess(
        ::grpc::MessageAllocator< ::Autoklav::Empty, ::Autoklav::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stopProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stopProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getSensorValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getSensorValues() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::SensorValues>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::SensorValues* response) { return this->getSensorValues(context, request, response); }));}
    void SetMessageAllocatorFor_getSensorValues(
        ::grpc::MessageAllocator< ::Autoklav::Empty, ::Autoklav::SensorValues>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::SensorValues>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getSensorValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSensorValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::SensorValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSensorValues(
      ::grpc::CallbackServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::SensorValues* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getStateMachineValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getStateMachineValues() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::StateMachineValues>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Autoklav::Empty* request, ::Autoklav::StateMachineValues* response) { return this->getStateMachineValues(context, request, response); }));}
    void SetMessageAllocatorFor_getStateMachineValues(
        ::grpc::MessageAllocator< ::Autoklav::Empty, ::Autoklav::StateMachineValues>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Autoklav::Empty, ::Autoklav::StateMachineValues>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getStateMachineValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStateMachineValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::StateMachineValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStateMachineValues(
      ::grpc::CallbackServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::StateMachineValues* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getStatus<WithCallbackMethod_getVariables<WithCallbackMethod_setVariable<WithCallbackMethod_startProcess<WithCallbackMethod_stopProcess<WithCallbackMethod_getSensorValues<WithCallbackMethod_getStateMachineValues<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getVariables() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVariables(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setVariable() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_setVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVariable(::grpc::ServerContext* /*context*/, const ::Autoklav::SetVariable* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_startProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_startProcess() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_startProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::StartProcessRequest* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stopProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stopProcess() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_stopProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSensorValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getSensorValues() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getSensorValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSensorValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::SensorValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getStateMachineValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getStateMachineValues() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getStateMachineValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStateMachineValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::StateMachineValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getVariables() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVariables(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVariables(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setVariable() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_setVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVariable(::grpc::ServerContext* /*context*/, const ::Autoklav::SetVariable* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetVariable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_startProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_startProcess() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_startProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::StartProcessRequest* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststartProcess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stopProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stopProcess() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_stopProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopProcess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSensorValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getSensorValues() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getSensorValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSensorValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::SensorValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSensorValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getStateMachineValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getStateMachineValues() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getStateMachineValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStateMachineValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::StateMachineValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStateMachineValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getStatus() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getVariables() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getVariables(context, request, response); }));
    }
    ~WithRawCallbackMethod_getVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVariables(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getVariables(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setVariable() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setVariable(context, request, response); }));
    }
    ~WithRawCallbackMethod_setVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVariable(::grpc::ServerContext* /*context*/, const ::Autoklav::SetVariable* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setVariable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_startProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_startProcess() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->startProcess(context, request, response); }));
    }
    ~WithRawCallbackMethod_startProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::StartProcessRequest* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* startProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stopProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stopProcess() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stopProcess(context, request, response); }));
    }
    ~WithRawCallbackMethod_stopProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stopProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getSensorValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getSensorValues() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getSensorValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_getSensorValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSensorValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::SensorValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSensorValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getStateMachineValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getStateMachineValues() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getStateMachineValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_getStateMachineValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStateMachineValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::StateMachineValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStateMachineValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Autoklav::Empty, ::Autoklav::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Autoklav::Empty, ::Autoklav::Status>* streamer) {
                       return this->StreamedgetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Autoklav::Empty,::Autoklav::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getVariables() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Autoklav::Empty, ::Autoklav::Variables>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Autoklav::Empty, ::Autoklav::Variables>* streamer) {
                       return this->StreamedgetVariables(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVariables(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetVariables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Autoklav::Empty,::Autoklav::Variables>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setVariable() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Autoklav::SetVariable, ::Autoklav::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Autoklav::SetVariable, ::Autoklav::Status>* streamer) {
                       return this->StreamedsetVariable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setVariable(::grpc::ServerContext* /*context*/, const ::Autoklav::SetVariable* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetVariable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Autoklav::SetVariable,::Autoklav::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_startProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_startProcess() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Autoklav::StartProcessRequest, ::Autoklav::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Autoklav::StartProcessRequest, ::Autoklav::Status>* streamer) {
                       return this->StreamedstartProcess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_startProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status startProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::StartProcessRequest* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstartProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Autoklav::StartProcessRequest,::Autoklav::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stopProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stopProcess() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Autoklav::Empty, ::Autoklav::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Autoklav::Empty, ::Autoklav::Status>* streamer) {
                       return this->StreamedstopProcess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stopProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stopProcess(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstopProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Autoklav::Empty,::Autoklav::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getSensorValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getSensorValues() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Autoklav::Empty, ::Autoklav::SensorValues>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Autoklav::Empty, ::Autoklav::SensorValues>* streamer) {
                       return this->StreamedgetSensorValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getSensorValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSensorValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::SensorValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetSensorValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Autoklav::Empty,::Autoklav::SensorValues>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getStateMachineValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getStateMachineValues() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Autoklav::Empty, ::Autoklav::StateMachineValues>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Autoklav::Empty, ::Autoklav::StateMachineValues>* streamer) {
                       return this->StreamedgetStateMachineValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getStateMachineValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getStateMachineValues(::grpc::ServerContext* /*context*/, const ::Autoklav::Empty* /*request*/, ::Autoklav::StateMachineValues* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetStateMachineValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Autoklav::Empty,::Autoklav::StateMachineValues>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getStatus<WithStreamedUnaryMethod_getVariables<WithStreamedUnaryMethod_setVariable<WithStreamedUnaryMethod_startProcess<WithStreamedUnaryMethod_stopProcess<WithStreamedUnaryMethod_getSensorValues<WithStreamedUnaryMethod_getStateMachineValues<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getStatus<WithStreamedUnaryMethod_getVariables<WithStreamedUnaryMethod_setVariable<WithStreamedUnaryMethod_startProcess<WithStreamedUnaryMethod_stopProcess<WithStreamedUnaryMethod_getSensorValues<WithStreamedUnaryMethod_getStateMachineValues<Service > > > > > > > StreamedService;
};

}  // namespace Autoklav


#endif  // GRPC_autoklav_2eproto__INCLUDED
